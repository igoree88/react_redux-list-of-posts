{"version":3,"sources":["api/api.ts","store/usersSlice.ts","store/postsSlice.ts","store/postDetailsSlice.ts","store/index.ts","Hooks.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["BASE_URL","fetchUsers","createAsyncThunk","_","rejectWithValue","fetch","response","ok","json","data","isError","action","type","endsWith","usersSlice","createSlice","name","initialState","users","selectedUserId","loading","error","reducers","getSelectUserId","state","payload","extraReducers","builder","addCase","pending","fulfilled","addMatcher","actions","fetchAllUsersPosts","fetchUserPostById","userId","deletePost","postId","method","postsSlice","posts","selectedPostId","getSelectPostId","filter","post","id","fetchPostDetailsByPostId","fetchComentsByPostId","deletePostComments","commentId","addPostComment","newComment","headers","body","JSON","stringify","postDetailsSlice","commentsOfPost","postDetails","comment","store","configureStore","reducer","usersReducer","postsReducer","postDetailsReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","PostsList","dispatch","useEffect","selectPostId","className","map","title","onClick","NewCommentForm","useState","setName","email","setEmail","setBody","handleSubmit","event","preventDefault","onSubmit","value","onChange","target","placeholder","PostDetails","visibleComments","setVisibleComments","postComment","UserSelect","selectUserId","user","Fragment","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52555962.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice, PayloadAction, createAsyncThunk, AnyAction,\n} from '@reduxjs/toolkit';\nimport { BASE_URL } from '../api/api';\n\nexport const fetchUsers = createAsyncThunk<User[], undefined, { rejectValue: string }>(\n  'users/fetchUsers',\n  async (_, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/users`);\n    //\n\n    if (!response.ok) {\n      return rejectWithValue('Server Error!');\n    }\n\n    const data = await response.json();\n\n    return data;\n  },\n);\n\nfunction isError(action: AnyAction) {\n  return action.type.endsWith('rejected');\n}\n\ntype UserState = {\n  users: User[],\n  selectedUserId: User['id'],\n  loading: boolean;\n  error: string | null\n};\n\nconst initialState: UserState = {\n  users: [],\n  selectedUserId: 0,\n  loading: false,\n  error: null,\n};\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    getSelectUserId(state, action: PayloadAction<User['id']>) {\n      state.selectedUserId = action.payload;\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUsers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchUsers.fulfilled, (state, action) => {\n        state.users = action.payload;\n        state.loading = false;\n      })\n      .addMatcher(isError, (state, action: PayloadAction<string>) => {\n        state.error = action.payload;\n        state.loading = false;\n      });\n  },\n});\n\nexport const { getSelectUserId } = usersSlice.actions;\n\nexport default usersSlice.reducer;\n","/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice, PayloadAction, createAsyncThunk, AnyAction,\n} from '@reduxjs/toolkit';\nimport { BASE_URL } from '../api/api';\n\nexport const fetchAllUsersPosts = createAsyncThunk<Post[], undefined, { rejectValue: string }>(\n  'posts/fetchAllUsersPosts',\n  async (_, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/posts`);\n    //\n\n    if (!response.ok) {\n      return rejectWithValue('Server Error!');\n    }\n\n    const data = await response.json();\n\n    return data;\n  },\n);\n\nexport const fetchUserPostById = createAsyncThunk<Post[], User['id'], { rejectValue: string }>(\n  'posts/fetchUserPostById',\n  async (userId, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}//posts?userId=${userId}`);\n    //\n\n    if (!response.ok) {\n      return rejectWithValue('Server Error!');\n    }\n\n    const data = await response.json();\n\n    return data;\n  },\n);\n\nexport const deletePost = createAsyncThunk<Post['id'], Post['id'], { rejectValue: string }>(\n  'postDetails/deletePost',\n  async (postId, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/comments/${postId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      return rejectWithValue('Can\\'t delete post. Server error.');\n    }\n\n    return postId;\n  },\n);\n\nfunction isError(action: AnyAction) {\n  return action.type.endsWith('rejected');\n}\n\ntype PostState = {\n  posts: Post[],\n  selectedPostId: Post['id'],\n  loading: boolean;\n  error: string | null\n};\n\nconst initialState: PostState = {\n  posts: [],\n  selectedPostId: 0,\n  loading: false,\n  error: null,\n};\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    getSelectPostId(state, action: PayloadAction<Post['id']>) {\n      state.selectedPostId = action.payload;\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAllUsersPosts.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchAllUsersPosts.fulfilled, (state, action) => {\n        state.posts = action.payload;\n        state.loading = false;\n      })\n      .addCase(fetchUserPostById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchUserPostById.fulfilled, (state, action) => {\n        state.posts = action.payload;\n        state.loading = false;\n      })\n      .addCase(deletePost.fulfilled, (state, action) => {\n        state.posts = state.posts.filter(post => post.id !== action.payload);\n      })\n      .addMatcher(isError, (state, action: PayloadAction<string>) => {\n        state.error = action.payload;\n        state.loading = false;\n      });\n  },\n});\n\nexport const { getSelectPostId } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n","/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice, PayloadAction, createAsyncThunk, AnyAction,\n} from '@reduxjs/toolkit';\nimport { BASE_URL } from '../api/api';\n\nexport const fetchPostDetailsByPostId = createAsyncThunk<Post, Post['id'], { rejectValue: string }>(\n  'postDetails/fetchPostDetailsByPostId',\n  async (postId, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n    if (!response.ok) {\n      return rejectWithValue('Server Error!');\n    }\n\n    const data = await response.json();\n\n    return data;\n  },\n);\n\nexport const fetchComentsByPostId = createAsyncThunk<any, Post['id'], { rejectValue: string }>(\n  'postDetails/fetchComentsByPostId',\n  async (postId, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n    if (!response.ok) {\n      return rejectWithValue('Server Error!');\n    }\n\n    const data = await response.json();\n\n    return data;\n  },\n);\n\nexport const deletePostComments = createAsyncThunk<Comment['id'], Comment['id'], { rejectValue: string }>(\n  'postDetails/deletePostComments',\n  async (commentId, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      return rejectWithValue('Can\\'t delete task. Server error.');\n    }\n\n    return commentId;\n  },\n);\n\nexport const addPostComment = createAsyncThunk<Comment, NewComment, { rejectValue: string }>(\n  'todos/addNewTodo',\n  async (newComment, { rejectWithValue }) => {\n    const response = await fetch(`${BASE_URL}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newComment),\n    });\n\n    if (!response.ok) {\n      return rejectWithValue('Can\\'t add task. Server error.');\n    }\n\n    return (await response.json()) as Comment;\n  },\n);\n\nfunction isError(action: AnyAction) {\n  return action.type.endsWith('rejected');\n}\n\ntype PostDetails = {\n  commentsOfPost: Comment[],\n  postDetails: Post | null,\n  loading: boolean;\n  error: string | null\n};\n\nconst initialState: PostDetails = {\n  commentsOfPost: [],\n  postDetails: null,\n  loading: false,\n  error: null,\n};\n\nconst postDetailsSlice = createSlice({\n  name: 'postDetails',\n  initialState,\n  reducers: {},\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPostDetailsByPostId.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchPostDetailsByPostId.fulfilled, (state, action) => {\n        state.postDetails = action.payload;\n        state.loading = false;\n      })\n      .addCase(fetchComentsByPostId.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchComentsByPostId.fulfilled, (state, action) => {\n        state.commentsOfPost = action.payload;\n        state.loading = false;\n      })\n      .addCase(deletePostComments.fulfilled, (state, action) => {\n        state.commentsOfPost = state.commentsOfPost.filter(comment => comment.id !== action.payload);\n      })\n      .addMatcher(isError, (state, action:PayloadAction<string>) => {\n        state.error = action.payload;\n        state.loading = false;\n      });\n  },\n});\n\nexport default postDetailsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport usersReducer from './usersSlice';\nimport postsReducer from './postsSlice';\nimport postDetailsReducer from './postDetailsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n    posts: postsReducer,\n    postDetails: postDetailsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../Hooks';\nimport {\n  fetchAllUsersPosts,\n  getSelectPostId,\n  fetchUserPostById,\n  deletePost,\n} from '../../store/postsSlice';\n\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const selectedUserId = useAppSelector(state => state\n    .users.selectedUserId);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      dispatch(fetchUserPostById(selectedUserId));\n    } else {\n      dispatch(fetchAllUsersPosts());\n    }\n  }, [selectedUserId]);\n\n  const posts = useAppSelector(state => state.posts.posts);\n  const selectPostId = useAppSelector(state => state.posts.selectedPostId);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts && (posts.map((post: Post) => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`User #${post.userId}: ${post.title}`}</b>\n\n            </div>\n            <div>\n              { selectPostId === post.id ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    dispatch(getSelectPostId(0));\n                  }}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    dispatch(getSelectPostId(post.id));\n                  }}\n                >\n                  Open\n                </button>\n              )}\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  dispatch(deletePost(post.id));\n                }}\n              >\n                х\n              </button>\n            </div>\n\n          </li>\n        )))}\n      </ul>\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../Hooks';\nimport {\n  fetchComentsByPostId,\n  addPostComment,\n} from '../../store/postDetailsSlice';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const selectPostId = useAppSelector(state => state\n    .posts.selectedPostId);\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: selectPostId,\n      name,\n      email,\n      body,\n    };\n\n    dispatch(addPostComment(newComment));\n    dispatch(fetchComentsByPostId(selectPostId));\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../Hooks';\nimport {\n  fetchPostDetailsByPostId,\n  fetchComentsByPostId,\n  deletePostComments,\n} from '../../store/postDetailsSlice';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [visibleComments, setVisibleComments] = useState<boolean>(true);\n\n  const dispatch = useAppDispatch();\n\n  const selectPostId = useAppSelector(state => state\n    .posts.selectedPostId);\n\n  const postDetails = useAppSelector(state => state\n    .postDetails.postDetails);\n\n  const commentsOfPost = useAppSelector(state => state\n    .postDetails.commentsOfPost);\n\n  useEffect(() => {\n    if (selectPostId) {\n      dispatch(fetchComentsByPostId(selectPostId));\n      dispatch(fetchPostDetailsByPostId(selectPostId));\n    }\n  }, [selectPostId]);\n\n  return (\n    <>\n      {selectPostId ? (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n\n            <p>{postDetails?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n\n            {visibleComments ? (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setVisibleComments(false);\n                }}\n              >\n                Hide comments\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setVisibleComments(true);\n                }}\n              >\n                Show comments\n              </button>\n            )}\n\n            {visibleComments && commentsOfPost?.map(postComment => (\n              <ul\n                key={postComment.id}\n                className=\"PostDetails__list\"\n              >\n                <li className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      dispatch(deletePostComments(postComment.id));\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{postComment.body}</p>\n                </li>\n              </ul>\n\n            ))}\n\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </div>\n      ) : (\n        <div>\n          <p>Please press the open button to display</p>\n          <p>more detailed information about the post</p>\n        </div>\n\n      )}\n\n    </>\n\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../Hooks';\nimport { fetchUsers, getSelectUserId } from '../../store/usersSlice';\n\nexport const UserSelect: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  const users = useAppSelector(state => state.users.users);\n\n  const selectedUserId = useAppSelector(state => state\n    .users.selectedUserId);\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectUserId = +event.target.value;\n\n    dispatch(getSelectUserId(selectUserId));\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n      <select\n        className=\"App__user-selector\"\n        name=\"selectedUserId\"\n        value={selectedUserId}\n        onChange={handleUserChange}\n      >\n        <option value={0}>All users</option>\n        {users && (users.map((user: User) => (\n          <React.Fragment\n            key={user.id}\n          >\n            <option value={user.id}>\n              {user.name}\n            </option>\n\n          </React.Fragment>\n        )))}\n\n      </select>\n    </label>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n\n          <PostDetails />\n\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}